"use strict";(self.webpackChunkvickyhella_github_io=self.webpackChunkvickyhella_github_io||[]).push([[355],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return k}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(a),d=i,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return a?n.createElement(k,r(r({ref:t},p),{},{components:a})):n.createElement(k,r({ref:t},p))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var m=2;m<o;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2140:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return r},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return m}});var n=a(3117),i=(a(7294),a(3905));const o={title:"Command Variables",sidebar_position:3},r=void 0,l={unversionedId:"development-basics/command-variables",id:"development-basics/command-variables",title:"Command Variables",description:"Set a command output as a variable",source:"@site/docs/development-basics/command-variables.md",sourceDirName:"development-basics",slug:"/development-basics/command-variables",permalink:"/zh/docs/development-basics/command-variables",draft:!1,editUrl:"https://github.com/vickyhella/vickyhella.github.io/edit/main/docs/development-basics/command-variables.md",tags:[],version:"current",lastUpdatedBy:"vickyhella",sidebarPosition:3,frontMatter:{title:"Command Variables",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Syncing a Local Branch with a Remote Branch",permalink:"/zh/docs/development-basics/git/sync-local-branch"},next:{title:"Docker",permalink:"/zh/docs/development-basics/docker/"}},s={},m=[{value:"Set a command output as a variable",id:"set-a-command-output-as-a-variable",level:2},{value:"Set a segment of a command output as a variable",id:"set-a-segment-of-a-command-output-as-a-variable",level:2},{value:"Save the variable persistently",id:"save-the-variable-persistently",level:2}],p={toc:m},c="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"set-a-command-output-as-a-variable"},"Set a command output as a variable"),(0,i.kt)("p",null,"To use the output of a specific command in another command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Command 1: Save the output to a variable\nvariable=$(command1)\n\n# Command 2: Use the variable in another command\ncommand2 $variable\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$(command1)")," executes ",(0,i.kt)("inlineCode",{parentName:"li"},"command1")," and captures its output into the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"variable"),"."),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"command2"),", you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"$variable")," to access the value captured from ",(0,i.kt)("inlineCode",{parentName:"li"},"command1"),".")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To clear a variable in bash, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"unset")," command:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"unset variable\n"))),(0,i.kt)("h2",{id:"set-a-segment-of-a-command-output-as-a-variable"},"Set a segment of a command output as a variable"),(0,i.kt)("p",null,"If you only want a segment of a command output to be used in another command, follow the steps below."),(0,i.kt)("p",null,"Assume your command output is like this and you want to save ",(0,i.kt)("inlineCode",{parentName:"p"},"vk-docker")," to a variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Example: the output of the "multipass list" command:\nName                    State             IPv4             Image\nvk-docker               Running           192.168.205.12   Ubuntu 22.04 LTS\n                                          172.17.0.1\n')),(0,i.kt)("p",null,"To extract the value ",(0,i.kt)("inlineCode",{parentName:"p"},"vk-docker")," and store it in a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"instance"),", you can use command substitution along with text processing utilities such as ",(0,i.kt)("inlineCode",{parentName:"p"},"grep"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"awk"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"sed"),". Since the output appears to be in a table-like format, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"awk")," to parse it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Save the output of your command to a variable\ncommand_output=$(your_command_here)\n\n# Use awk to extract the value of the "Name" column\ninstance=$(echo "$command_output" | awk \'NR > 1 { print $1; exit }\')\n\n# Display the value of the "instance" variable\necho "$instance"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Explanation"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"command_output"),": This variable holds some output from a command execution. It could be a multi-line string where each line contains information. "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},'echo "$command_output"'),": prints the value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"command_output")," variable to the standard output. "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"awk 'NR > 1 { print $1; exit }'"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"awk")," is a powerful text processing tool used to manipulate and analyze structured data like columns and rows:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"awk"),": Invokes the ",(0,i.kt)("inlineCode",{parentName:"li"},"awk")," command to process the text. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'NR > 1 { print $1; exit }'"),": the ",(0,i.kt)("inlineCode",{parentName:"li"},"awk")," script enclosed within single quotes. It defines how the input text should be processed. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NR > 1"),": a condition in ",(0,i.kt)("inlineCode",{parentName:"li"},"awk"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"NR"),' stands for "Number of Records" and represents the current line number being processed. ',(0,i.kt)("inlineCode",{parentName:"li"},"NR > 1")," means we are only interested in lines with line numbers greater than 1, excluding the first line. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{ print $1; exit }"),": actions to be performed when the condition ",(0,i.kt)("inlineCode",{parentName:"li"},"NR > 1")," is true. ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"print $1"),": prints the first field of the current line. In ",(0,i.kt)("inlineCode",{parentName:"li"},"awk"),", fields are separated by whitespace (spaces or tabs), and the first field is denoted by ",(0,i.kt)("inlineCode",{parentName:"li"},"$1"),". It essentially extracts the first word or value from the current line. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exit"),": exits ",(0,i.kt)("inlineCode",{parentName:"li"},"awk")," after processing the first line that matches the condition ",(0,i.kt)("inlineCode",{parentName:"li"},"NR > 1"),". It means we only want the value from the first matching line. ")))),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"instance=$(...)"),": captures the output of the whole command enclosed in ",(0,i.kt)("inlineCode",{parentName:"li"},"$(...)")," and assigns it to the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"instance"),".")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},'Keep in mind that this example assumes that the "Name" column contains no spaces or special characters in its values. If the data in the "Name" column is more complex, the ',(0,i.kt)("inlineCode",{parentName:"p"},"awk")," command might need to be adjusted accordingly.")),(0,i.kt)("p",null,"You can run the commands in a single line as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"command_output=$(multipass list)&&instance=$(echo \"$command_output\" | awk 'NR > 1 { print $1; exit }')\n")),(0,i.kt)("p",null,"Now if you run ",(0,i.kt)("inlineCode",{parentName:"p"},"echo $instance"),", you will get ",(0,i.kt)("inlineCode",{parentName:"p"},"vk-docker"),"."),(0,i.kt)("h2",{id:"save-the-variable-persistently"},"Save the variable persistently"),(0,i.kt)("p",null,"In Unix/Linux (bash), variables set in a terminal session will only be effective for the duration of that session. Once you close the terminal or log out, the variables will be lost."),(0,i.kt)("p",null,"To make a variable permanent so that it is available across terminal sessions or even after system reboots:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Bash: add the following line to your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bashrc")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'export instance="vk-docker"\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Other shells like zsh: modify the appropriate configuration file (",(0,i.kt)("inlineCode",{parentName:"p"},"~/.zshrc"),")."))),(0,i.kt)("p",null,"After making the change, save the file and run ",(0,i.kt)("inlineCode",{parentName:"p"},"source ~/.bashrc")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"source ~/.zshrc")," for zsh) to apply the changes immediately without having to restart the terminal."))}u.isMDXComponent=!0}}]);