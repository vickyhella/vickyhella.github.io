"use strict";(self.webpackChunkvickyhella_github_io=self.webpackChunkvickyhella_github_io||[]).push([[5746],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,h=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8178:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c}});var a=n(3117),r=(n(7294),n(3905));const o={title:"Command Operators",sidebar_position:1},l=void 0,i={unversionedId:"development-basics/linux_commands/command_operators",id:"development-basics/linux_commands/command_operators",title:"Command Operators",description:"Command Operators",source:"@site/docs/development-basics/linux_commands/command_operators.md",sourceDirName:"development-basics/linux_commands",slug:"/development-basics/linux_commands/command_operators",permalink:"/zh/docs/development-basics/linux_commands/command_operators",draft:!1,editUrl:"https://github.com/vickyhella/vickyhella.github.io/edit/main/docs/development-basics/linux_commands/command_operators.md",tags:[],version:"current",lastUpdatedBy:"vickyhella",lastUpdatedAt:1679992328,formattedLastUpdatedAt:"2023\u5e743\u670828\u65e5",sidebarPosition:1,frontMatter:{title:"Command Operators",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Linux Command Basics",permalink:"/zh/docs/development-basics/linux_commands/"},next:{title:"Viewing and Editing Files",permalink:"/zh/docs/development-basics/linux_commands/view_edit_files"}},s={},c=[{value:"Command Operators",id:"command-operators",level:2},{value:"<code>&amp;</code>",id:"",level:3},{value:"<code>;</code>",id:"-1",level:3},{value:"<code>||</code>",id:"-2",level:3},{value:"<code>|</code>",id:"-3",level:3},{value:"<code>&amp;&amp;</code>",id:"-4",level:3},{value:"<code>!</code>",id:"-5",level:3},{value:"<code>(..)</code>",id:"-6",level:3},{value:"<code>{..}</code>",id:"-7",level:3},{value:"<code></code>",id:"-8",level:3},{value:"<code>&gt;, &gt;&gt;, &lt;</code>",id:"--",level:3}],d={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"command-operators"},"Command Operators"),(0,r.kt)("p",null,"Command-chaining operators are special characters used to write miniature shell scripts in the command line. This is incredibly useful in automating tasks."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"References: ",(0,r.kt)("a",{parentName:"li",href:"https://www.makeuseof.com/linux-command-line-chaining-operators/"},"10 Linux Command-Line Operators and What They Do"))),(0,r.kt)("h3",{id:""},(0,r.kt)("inlineCode",{parentName:"h3"},"&")),(0,r.kt)("p",null,"The Ampersand Operator. Executes that Linux command in the background."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"gedit &\n")),(0,r.kt)("h3",{id:"-1"},(0,r.kt)("inlineCode",{parentName:"h3"},";")),(0,r.kt)("p",null,"The Semicolon Operator. Executes commands in a defined, sequential order."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The shell does not check if each command terminates successfully.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pwd ; mkdir test ; cd test ; touch file\n")),(0,r.kt)("h3",{id:"-2"},(0,r.kt)("inlineCode",{parentName:"h3"},"||")),(0,r.kt)("p",null,"The OR Operator. Executes the command that follows only if the preceding command fails."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bad_command || ls\n")),(0,r.kt)("p",null,"In this example, only if the ",(0,r.kt)("inlineCode",{parentName:"p"},"bad_command")," fails will the ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," command be executed."),(0,r.kt)("h3",{id:"-3"},(0,r.kt)("inlineCode",{parentName:"h3"},"|")),(0,r.kt)("p",null,"The Pipe Operator. Directs the output of the preceding command as input to the succeeding command. It is most commonly used to filter data with the grep command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cat test | grep -i "makeuseof"\n')),(0,r.kt)("p",null,"This command example sends the output of the cat command as input to the grep command, which then filters the output against a specified string."),(0,r.kt)("h3",{id:"-4"},(0,r.kt)("inlineCode",{parentName:"h3"},"&&")),(0,r.kt)("p",null,"The AND Operator. Executes commands only if the ",(0,r.kt)("strong",{parentName:"p"},"preceding command was successfully executed"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pwd && mkdir test && cd test && bad_command && ls\n")),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"bad_command")," fails to run, the shell will return an error and skip the ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," command."),(0,r.kt)("h3",{id:"-5"},(0,r.kt)("inlineCode",{parentName:"h3"},"!")),(0,r.kt)("p",null,"The NOT Operator. Similar ways to an except statement in programming."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"rm -r !(*.txt)\n")),(0,r.kt)("p",null,"This sample command will recursively remove all files in a directory except for files that have a ",(0,r.kt)("inlineCode",{parentName:"p"},".txt")," extension."),(0,r.kt)("h3",{id:"-6"},(0,r.kt)("inlineCode",{parentName:"h3"},"(..)")),(0,r.kt)("p",null,"The Precedence Operator. ",(0,r.kt)("strong",{parentName:"p"},"Sets groups and precedence")," to ensure that the execution sequence meets your expectations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'(ls *.txt > txt-files.list && cp *.tx ~) && (ls *.deb > deb-packages.list && cp *.deb ~) || echo "Precedence Test!"\n')),(0,r.kt)("p",null,"In this sample syntax, both groups of commands must return an exit code 0 to ensure the successful execution of the last command. This example requires that ",(0,r.kt)("strong",{parentName:"p"},"both commands in the first set () exit with 0")," for the second set () to run."),(0,r.kt)("h3",{id:"-7"},(0,r.kt)("inlineCode",{parentName:"h3"},"{..}")),(0,r.kt)("p",null,"The Combination Operator. Groups commands. Whichever commands you want to group you can place them inside curly brackets, and they will be ",(0,r.kt)("strong",{parentName:"p"},"executed depending upon the exit code of the first command"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'test -f /etc/passwd && {pwd ; date} && echo $0 ; echo "Hello"\n')),(0,r.kt)("p",null,"The sample syntax will test if the ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/passwd"),' file is present, print the current working directory, date, shell name, and echo "Hello".'),(0,r.kt)("h3",{id:"-8"},(0,r.kt)("inlineCode",{parentName:"h3"},"\\")),(0,r.kt)("p",null,"Concatenation or the Escape Operator. You can either use it to ",(0,r.kt)("strong",{parentName:"p"},"concatenate two commands")," or as an ",(0,r.kt)("strong",{parentName:"p"},"escape character")," when working with strings in the shell."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'mkdir test0 test1 \\ test2\necho "Hello! from the \\nother side"\n')),(0,r.kt)("p",null,"The first command will make 3 directories named test0, test1, and test2, and the second command will print the string separated by a new line."),(0,r.kt)("p",null,"In other words, if a command is too long, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"\\")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Enter")," to split it into different lines without executing them immediately. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pwd && \\\nls\n")),(0,r.kt)("h3",{id:"--"},(0,r.kt)("inlineCode",{parentName:"h3"},">, >>, <")),(0,r.kt)("p",null,"The Redirection Operators. Redirects output or input to a file either by re-writing the file or by appending to it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To re-write a file, use the single angle bracket ",(0,r.kt)("inlineCode",{parentName:"li"},">")," syntax. "),(0,r.kt)("li",{parentName:"ul"},"To append to a file, use the double angle bracket syntax ",(0,r.kt)("inlineCode",{parentName:"li"},">>"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo "dsd" > test ; echo "bssss" >> test\n')),(0,r.kt)("p",null,"In the sample syntax, the first command will overwrite the ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," file with the provided string. In the second command, the string provided will be appended to the ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," file."))}m.isMDXComponent=!0}}]);