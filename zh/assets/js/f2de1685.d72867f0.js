"use strict";(self.webpackChunkvickyhella_github_io=self.webpackChunkvickyhella_github_io||[]).push([[4385],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,k=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4836:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Dockerfile",sidebar_position:2},p=void 0,c={unversionedId:"development-basics/docker/create-dockerfile",id:"development-basics/docker/create-dockerfile",title:"Dockerfile",description:"This document describes how to create your own Dockerfile, build an image using your Dockerfile, and run a container from the image you build.",source:"@site/docs/development-basics/docker/create-dockerfile.md",sourceDirName:"development-basics/docker",slug:"/development-basics/docker/create-dockerfile",permalink:"/zh/docs/development-basics/docker/create-dockerfile",editUrl:"https://github.com/vickyhella/vickyhella.github.io/edit/main/docs/development-basics/docker/create-dockerfile.md",tags:[],version:"current",lastUpdatedBy:"vickyhella",lastUpdatedAt:1680091914,formattedLastUpdatedAt:"2023/3/29",sidebarPosition:2,frontMatter:{title:"Dockerfile",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Docker Commands",permalink:"/zh/docs/development-basics/docker/docker-commands"},next:{title:"Launching a Project in a Container",permalink:"/zh/docs/development-basics/docker/launch-websites-in-containers"}},s={},d=[{value:"Create a Dockerfile",id:"create-a-dockerfile",level:2},{value:"Example Dockerfile",id:"example-dockerfile",level:2},{value:"Build an Image",id:"build-an-image",level:2},{value:"Run a Container",id:"run-a-container",level:2}],m={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document describes how to create your own Dockerfile, build an image using your Dockerfile, and run a container from the image you build."),(0,o.kt)("h2",{id:"create-a-dockerfile"},"Create a Dockerfile"),(0,o.kt)("p",null,"A Dockerfile is a text file that contains instructions for building a Docker image, which is used to create containers that can run an application and its dependencies in a portable and reproducible way."),(0,o.kt)("p",null,"First, you need to create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory of your project. This directory should also contain all the files and directories needed for your application to run. "),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"When you build a Docker image from the Dockerfile, Docker will create a container with a copy of these files and directories."))),(0,o.kt)("p",null,"When the Dockerfile is created, follow the steps below to write your Dockerfile:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Choose a base image"),": A base image is a pre-built image that contains a specific runtime environment or set of tools. You can find base images on Docker Hub or other container registries."),(0,o.kt)("p",{parentName:"li"},"For example, if you want to create a Dockerfile for a Node.js application, you can choose the official Node.js base image:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},"FROM node:14\n")),(0,o.kt)("p",{parentName:"li"},"This tells Docker to use the Node.js version ",(0,o.kt)("inlineCode",{parentName:"p"},"14")," base image as the starting point for your container.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Set the working directory"),": The next step is to set the working directory for your container using the ",(0,o.kt)("inlineCode",{parentName:"p"},"WORKDIR")," instruction. This is the directory where your application code will be copied to and where your application will run from:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},"WORKDIR /app\n")),(0,o.kt)("p",{parentName:"li"},"This sets the working directory to ",(0,o.kt)("inlineCode",{parentName:"p"},"/app"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Copy the application files"),": To copy the application files to the container, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"COPY")," instruction. You can copy individual files or entire directories:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},"COPY package*.json ./\nCOPY src/ ./src/\n")),(0,o.kt)("p",{parentName:"li"},"This copies the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"package-lock.json")," files to the container's working directory, as well as the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/")," directory and its contents.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Install dependencies"),": If your application has dependencies, you need to install them in the container using the ",(0,o.kt)("inlineCode",{parentName:"p"},"RUN")," instruction. For example, for a Node.js application, you can install the dependencies using npm:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"RUN npm install\n")),(0,o.kt)("p",{parentName:"li"},"This installs the Node.js dependencies listed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Expose ports"),": If your application listens on a specific port, you need to expose that port using the ",(0,o.kt)("inlineCode",{parentName:"p"},"EXPOSE")," instruction:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},"EXPOSE 3000\n")),(0,o.kt)("p",{parentName:"li"},"This exposes port 3000 on the container.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Specify the start command"),": Finally, you need to specify the command that starts your application using the ",(0,o.kt)("inlineCode",{parentName:"p"},"CMD")," instruction:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},'CMD ["npm", "start"]\n')),(0,o.kt)("p",{parentName:"li"},"This runs the ",(0,o.kt)("inlineCode",{parentName:"p"},"npm start")," command to start the Node.js application."))),(0,o.kt)("h2",{id:"example-dockerfile"},"Example Dockerfile"),(0,o.kt)("p",null,"Here's the complete Dockerfile for a Node.js application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Use the official Node.js image as the base image\nFROM node:14\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the package.json and package-lock.json files \n# to the container\'s working directory\nCOPY package*.json ./\n\n# Install the dependencies\nRUN npm install\n\n# Copy the src directory and its content\nCOPY src/ ./src/\n\n# Expose port 3000\nEXPOSE 3000\n\n# Start the application\nCMD ["npm", "start"]\n')),(0,o.kt)("h2",{id:"build-an-image"},"Build an Image"),(0,o.kt)("p",null,"Once you have created your Dockerfile, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker build")," command to build a Docker image:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t my-node-app .\n")),(0,o.kt)("p",null,"  This command tells Docker to build a new image with the tag ",(0,o.kt)("inlineCode",{parentName:"p"},"my-node-app")," using the Dockerfile in the current directory (.)."),(0,o.kt)("p",null,"  :::info"),(0,o.kt)("p",null,"  If you need to tag your image, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"-t")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t my-node-app:1.0.0 .\n")),(0,o.kt)("p",null,"  This command builds a Docker image using the Dockerfile in the current directory and tags it with the name ",(0,o.kt)("inlineCode",{parentName:"p"},"my-app")," and the version ",(0,o.kt)("inlineCode",{parentName:"p"},"1.0.0"),"."),(0,o.kt)("p",null,"  :::"),(0,o.kt)("h2",{id:"run-a-container"},"Run a Container"),(0,o.kt)("p",null,"To run the Docker container, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 3000:3000 my-node-app\n")),(0,o.kt)("p",null,"  This command runs a container from the ",(0,o.kt)("inlineCode",{parentName:"p"},"my-node-app")," image and maps port ",(0,o.kt)("inlineCode",{parentName:"p"},"3000")," on the host to port ",(0,o.kt)("inlineCode",{parentName:"p"},"3000")," in the container. The application will be accessible at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),"."),(0,o.kt)("p",null,"  :::info"),(0,o.kt)("p",null,"  If you want to run your containers in teh background, run the ",(0,o.kt)("inlineCode",{parentName:"p"},"-d")," flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d -p 3000:3000 my-node-app\n")),(0,o.kt)("p",null,"  This command tells Docker to run the container in the background (detached mode). You can use the docker logs command to view the application logs later:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs <container-id>\n")),(0,o.kt)("p",null,"  :::"))}u.isMDXComponent=!0}}]);