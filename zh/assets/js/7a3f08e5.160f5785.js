"use strict";(self.webpackChunkvickyhella_github_io=self.webpackChunkvickyhella_github_io||[]).push([[5487],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return k}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return t?i.createElement(k,l(l({ref:n},d),{},{components:t})):i.createElement(k,l({ref:n},d))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4843:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return p}});var i=t(3117),a=(t(7294),t(3905));const r={title:"Lesson 4: Creating DITA Content",sidebar_position:4,tags:["DITA","Technical Writing","XML","Creating Content"]},l=void 0,o={unversionedId:"dita/creating-dita-content",id:"dita/creating-dita-content",title:"Lesson 4: Creating DITA Content",description:"Creating a topic in a text editor",source:"@site/docs/dita/4-creating-dita-content.md",sourceDirName:"dita",slug:"/dita/creating-dita-content",permalink:"/zh/docs/dita/creating-dita-content",draft:!1,editUrl:"https://github.com/vickyhella/vickyhella.github.io/edit/main/docs/dita/4-creating-dita-content.md",tags:[{label:"DITA",permalink:"/zh/docs/tags/dita"},{label:"Technical Writing",permalink:"/zh/docs/tags/technical-writing"},{label:"XML",permalink:"/zh/docs/tags/xml"},{label:"Creating Content",permalink:"/zh/docs/tags/creating-content"}],version:"current",lastUpdatedBy:"vickyhella",lastUpdatedAt:1690536626,formattedLastUpdatedAt:"2023\u5e747\u670828\u65e5",sidebarPosition:4,frontMatter:{title:"Lesson 4: Creating DITA Content",sidebar_position:4,tags:["DITA","Technical Writing","XML","Creating Content"]},sidebar:"tutorialSidebar",previous:{title:"Lesson 3: Metadata",permalink:"/zh/docs/dita/metadata"},next:{title:"Lesson 5: Tables",permalink:"/zh/docs/dita/tables"}},s={},p=[{value:"Creating a topic in a text editor",id:"creating-a-topic-in-a-text-editor",level:2},{value:"Creating a topic in an XML editor",id:"creating-a-topic-in-an-xml-editor",level:2},{value:"Notes, cautions, and warnings",id:"notes-cautions-and-warnings",level:2},{value:"Bulleted and numbered lists",id:"bulleted-and-numbered-lists",level:2},{value:"Blocks versus inline elements",id:"blocks-versus-inline-elements",level:2}],d={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"creating-a-topic-in-a-text-editor"},"Creating a topic in a text editor"),(0,a.kt)("p",null,"DITA files are XML, and XML is plain text. Therefore, you can create an XML file in any text editor."),(0,a.kt)("p",null,"A basic DITA topic needs an ",(0,a.kt)("inlineCode",{parentName:"p"},"XML declaration"),", a ",(0,a.kt)("inlineCode",{parentName:"p"},"DOCTYPE")," declaration, a ",(0,a.kt)("inlineCode",{parentName:"p"},"topic"),", an ",(0,a.kt)("inlineCode",{parentName:"p"},"id attribute")," on the topic, and a ",(0,a.kt)("inlineCode",{parentName:"p"},"title"),". Here is a minimal valid topic:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n\n<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">\n\n<topic id="myfirsttopic">\n\n  <title>Hello world</title>\n\n</topic>\n')),(0,a.kt)("p",null,"The topic above is valid, but it doesn\u2019t have any body content. To make a topic useful, you need something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n\n<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">\n\n<topic id="myfirsttopic">\n\n  <title>Hello world</title>\n\n<body>\n\n  <p>Here is a paragraph</p>\n\n  <ul>\n\n    <li>bulleted lists are nice</li>\n\n    <li>especially if you have at least two items</li>\n\n  </ul>\n\n  <note>And don\'t forget the notes.</note>\n\n</body>\n\n</topic>\n')),(0,a.kt)("h2",{id:"creating-a-topic-in-an-xml-editor"},"Creating a topic in an XML editor"),(0,a.kt)("p",null,"You can use an editor to create content. The course recommends oXygen, which is not open source and free. So I will further investigate a tool to use later. I might use VSCode for the time being."),(0,a.kt)("h2",{id:"notes-cautions-and-warnings"},"Notes, cautions, and warnings"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<note>")," element lets you create notes, cautions, warnings, and other admonishments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<note>\n\nMost surface-feeding ducks are agile and will take to the air easily. Approach these ducks slowly.\n\n</note>\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," attribute for the ",(0,a.kt)("inlineCode",{parentName:"p"},"<note>")," element is used to indicate different kinds of notes. DITA defines a number of values for the type attribute (",(0,a.kt)("strong",{parentName:"p"},"Fun fact"),": the Docusaurus framework also uses these note values.):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"note (the default)"),(0,a.kt)("li",{parentName:"ul"},"attention"),(0,a.kt)("li",{parentName:"ul"},"danger"),(0,a.kt)("li",{parentName:"ul"},"caution"),(0,a.kt)("li",{parentName:"ul"},"important"),(0,a.kt)("li",{parentName:"ul"},"tip")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<note type="warning">\n\nDo not feed bread to ducks. It is unhealthy.\n\n</note>\n')),(0,a.kt)("h2",{id:"bulleted-and-numbered-lists"},"Bulleted and numbered lists"),(0,a.kt)("p",null,"The most common lists used in DITA are unordered (\u201cbulleted\u201d) lists (",(0,a.kt)("inlineCode",{parentName:"p"},"<ul>"),") and ordered (\u201cnumbered\u201d) lists (",(0,a.kt)("inlineCode",{parentName:"p"},"<ol>"),")."),(0,a.kt)("p",null,"Both ordered and unordered lists contain one or more list item (",(0,a.kt)("inlineCode",{parentName:"p"},"<li>"),") element. An example is like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<p>The life cycle of a duck is similar to that of most birds:</p>\n\n<ol>\n\n   <li>Egg</li>\n\n   <li>Hatchling</li>\n\n   <li>Duckling</li>\n\n   <li>Juvenile</li>\n\n   <li>Adult</li>\n\n</ol>\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"An ordered list is useful for showing things that have a sequence, however, if you need to describe a process, you might be better off using the ",(0,a.kt)("inlineCode",{parentName:"p"},"<steps>")," element in a task topic.")),(0,a.kt)("p",null,"You can also nest a list by starting a new ",(0,a.kt)("inlineCode",{parentName:"p"},"<ul>")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"<ol>")," element inside an ",(0,a.kt)("inlineCode",{parentName:"p"},"<li>")," element:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"\n<p>Ducks have these features:</p>\n\n<ul>\n\n   <li>Webbed feet for swimming.</li>\n\n   <li>Shorter legs than other waterfowl.</li>\n\n   <li>Distinctive bill.\n\n      <ul>\n\n         <li>Wide and flat for filter feeding.</li>\n\n         <li>Long and narrow for fishing (Mergansers)</li>\n\n      </ul>\n\n   </li>\n\n</ul>\n")),(0,a.kt)("p",null,"In addition to the unordered list, DITA also defines a simple list (",(0,a.kt)("inlineCode",{parentName:"p"},"<sl>"),") element, which you can use for lists that contain just a few words in each item. The item in a simple list uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"<sli>")," element:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<p>There are several types of ducks:</p>\n\n<sl>\n\n   <sli>Tree ducks</sli>\n\n   <sli>Surface-feeding ducks</sli>\n\n   <sli>Bay ducks</sli>\n\n   <sli>Sea ducks</sli>\n\n</sl>\n")),(0,a.kt)("h2",{id:"blocks-versus-inline-elements"},"Blocks versus inline elements"),(0,a.kt)("p",null,"The distinction between block and inline elements are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A block element is a paragraph-level element, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"<p>")," tag, ",(0,a.kt)("inlineCode",{parentName:"p"},"<li>"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"<codeblock>"),". As a general rule, ",(0,a.kt)("strong",{parentName:"p"},"a block element is separated vertically on the page"),". That is, if you have two ",(0,a.kt)("inlineCode",{parentName:"p"},"<p>")," tags in a row, they are separated into two lines after being rendered.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"An inline element is an element that provides for markup inside a paragraph, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"<tm>")," (trademark), ",(0,a.kt)("inlineCode",{parentName:"p"},"<i>")," (italics), ",(0,a.kt)("inlineCode",{parentName:"p"},"<xref>")," (cross-reference), or ",(0,a.kt)("inlineCode",{parentName:"p"},"<term>")," (term). Inline elements, by default, do not result in line breaks."))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Inline elements are similar to character styles in word processing tools."),(0,a.kt)("p",{parentName:"admonition"},"However, some inline elements, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"<fn>")," (footnote) and ",(0,a.kt)("inlineCode",{parentName:"p"},"<indexterm>")," (index entry), are processed differently. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"<indexterm>")," entries are processed to create a back-of-the-book index. The text content of ",(0,a.kt)("inlineCode",{parentName:"p"},"<indexterm>")," does not generally appear at the location where the inline element occurs:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<p>An inline element<indexterm>inline element</indexterm> <i>does not</i> result in line breaks.</p>\n"))))}u.isMDXComponent=!0}}]);