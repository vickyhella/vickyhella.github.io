"use strict";(self.webpackChunkvickyhella_github_io=self.webpackChunkvickyhella_github_io||[]).push([[2894],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9487:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Basics",sidebar_position:1},s=void 0,c={unversionedId:"tech/basics",id:"tech/basics",title:"Basics",description:"Introduction",source:"@site/docs/tech/basics.md",sourceDirName:"tech",slug:"/tech/basics",permalink:"/docs/tech/basics",editUrl:"https://github.com/vickyhella/vickyhella.github.io/edit/main/docs/tech/basics.md",tags:[],version:"current",lastUpdatedBy:"vickyhella",lastUpdatedAt:1673795262,formattedLastUpdatedAt:"1/15/2023",sidebarPosition:1,frontMatter:{title:"Basics",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Common Collocation Mistakes",permalink:"/docs/translation/collocation/"},next:{title:"Commands",permalink:"/docs/tech/commands"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Absolute and Relative Paths",id:"absolute-and-relative-paths",level:3},{value:"Command Operators",id:"command-operators",level:3},{value:"The Ampersand Operator <code>&amp;</code>",id:"the-ampersand-operator-",level:4},{value:"The Semicolon Operator <code>;</code>",id:"the-semicolon-operator-",level:4},{value:"The OR Operator <code>||</code>",id:"the-or-operator-",level:4},{value:"The Pipe Operator <code>|</code>",id:"the-pipe-operator-",level:4},{value:"The AND Operator <code>&amp;&amp;</code>",id:"the-and-operator-",level:4},{value:"The NOT Operator <code>!</code>",id:"the-not-operator-",level:4},{value:"The Precedence Operator <code>(..)</code>",id:"the-precedence-operator-",level:4},{value:"The Combination Operator <code>{..}</code>",id:"the-combination-operator-",level:4},{value:"Concatenation or the Escape Operator <code></code>",id:"concatenation-or-the-escape-operator-",level:4},{value:"The Redirection Operators <code>&gt;, &gt;&gt;, &lt;</code>",id:"the-redirection-operators---",level:4}],m={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This document includes some basic technical knowledge."),(0,o.kt)("h3",{id:"absolute-and-relative-paths"},"Absolute and Relative Paths"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"./ # Directory where the current file locates\n../ # One level up\n../../ # Two levels up\n")),(0,o.kt)("h3",{id:"command-operators"},"Command Operators"),(0,o.kt)("p",null,"Command-chaining operators are special characters used to write miniature shell scripts in the command line. This is incredibly useful in automating tasks."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"References: ",(0,o.kt)("a",{parentName:"li",href:"https://www.makeuseof.com/linux-command-line-chaining-operators/"},"10 Linux Command-Line Operators and What They Do"))),(0,o.kt)("h4",{id:"the-ampersand-operator-"},"The Ampersand Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"&")),(0,o.kt)("p",null,"Executes that Linux command in the background."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"gedit &\n")),(0,o.kt)("h4",{id:"the-semicolon-operator-"},"The Semicolon Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},";")),(0,o.kt)("p",null,"Executes commands in a defined, sequential order."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The shell does not check if each command terminates successfully"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"pwd ; mkdir test ; cd test ; touch file\n")),(0,o.kt)("h4",{id:"the-or-operator-"},"The OR Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"||")),(0,o.kt)("p",null,"Executes the command that follows only if the preceding command fails."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"bad_command || ls\n")),(0,o.kt)("p",null,"In this example, only if the ",(0,o.kt)("inlineCode",{parentName:"p"},"bad_command")," fails will the ",(0,o.kt)("inlineCode",{parentName:"p"},"ls")," command be executed."),(0,o.kt)("h4",{id:"the-pipe-operator-"},"The Pipe Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"|")),(0,o.kt)("p",null,"Directs the output of the preceding command as input to the succeeding command. It is most commonly used to filter data with the grep command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'cat test | grep -i "makeuseof"\n')),(0,o.kt)("p",null,"This command example sends the output of the cat command as input to the grep command, which then filters the output against a specified string."),(0,o.kt)("h4",{id:"the-and-operator-"},"The AND Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"&&")),(0,o.kt)("p",null,"Executes commands only if the ",(0,o.kt)("strong",{parentName:"p"},"preceding command was successfully executed"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"pwd && mkdir test && cd test && bad_command && ls\n")),(0,o.kt)("p",null,"Since ",(0,o.kt)("inlineCode",{parentName:"p"},"bad_command")," fails to run, the shell will return an error and skip the ",(0,o.kt)("inlineCode",{parentName:"p"},"ls")," command."),(0,o.kt)("h4",{id:"the-not-operator-"},"The NOT Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"!")),(0,o.kt)("p",null,"Similar ways to an except statement in programming."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"rm -r !(*.txt)\n")),(0,o.kt)("p",null,"This sample command will recursively remove all files in a directory except for files that have a ",(0,o.kt)("inlineCode",{parentName:"p"},".txt")," extension."),(0,o.kt)("h4",{id:"the-precedence-operator-"},"The Precedence Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"(..)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Sets groups and precedence")," to ensure that the execution sequence meets your expectations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'(ls *.txt > txt-files.list && cp *.tx ~) && (ls *.deb > deb-packages.list && cp *.deb ~) || echo "Precedence Test!"\n')),(0,o.kt)("p",null,"In this sample syntax, both groups of commands must return an exit code 0 to ensure the successful execution of the last command. This example requires that ",(0,o.kt)("strong",{parentName:"p"},"both commands in the first set () exit with 0")," for the second set () to run."),(0,o.kt)("h4",{id:"the-combination-operator-"},"The Combination Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"{..}")),(0,o.kt)("p",null,"Groups commands. Whichever commands you want to group you can place them inside curly brackets, and they will be ",(0,o.kt)("strong",{parentName:"p"},"executed depending upon the exit code of the first command"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'test -f /etc/passwd && {pwd ; date} && echo $0 ; echo "Hello"\n')),(0,o.kt)("p",null,"The sample syntax will test if the ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/passwd"),' file is present, print the current working directory, date, shell name, and echo "Hello".'),(0,o.kt)("h4",{id:"concatenation-or-the-escape-operator-"},"Concatenation or the Escape Operator ",(0,o.kt)("inlineCode",{parentName:"h4"},"\\")),(0,o.kt)("p",null,"You can either use it to ",(0,o.kt)("strong",{parentName:"p"},"concatenate two commands")," or as an ",(0,o.kt)("strong",{parentName:"p"},"escape character")," when working with strings in the shell."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'mkdir test0 test1 \\ test2\necho "Hello! from the \\nother side"\n')),(0,o.kt)("p",null,"The first command will make 3 directories named test0, test1, and test2, and the second command will print the string separated by a new line."),(0,o.kt)("p",null,"In other words, if a command is too long, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"\\")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Enter")," to split it into different lines without executing them immediately. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"pwd && \\\nls\n")),(0,o.kt)("h4",{id:"the-redirection-operators---"},"The Redirection Operators ",(0,o.kt)("inlineCode",{parentName:"h4"},">, >>, <")),(0,o.kt)("p",null,"Redirects output or input to a file either by re-writing the file or by appending to it."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To re-write a file, use the single angle bracket ",(0,o.kt)("inlineCode",{parentName:"li"},">")," syntax. "),(0,o.kt)("li",{parentName:"ul"},"To append to a file, use the double angle bracket syntax ",(0,o.kt)("inlineCode",{parentName:"li"},">>"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'echo "dsd" > test ; echo "bssss" >> test\n')),(0,o.kt)("p",null,"In the sample syntax, the first command will overwrite the ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," file with the provided string. In the second command, the string provided will be appended to the ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," file."))}u.isMDXComponent=!0}}]);