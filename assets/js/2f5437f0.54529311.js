"use strict";(self.webpackChunkvickyhella_github_io=self.webpackChunkvickyhella_github_io||[]).push([[7334],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),k=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=k(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=k(t),p=a,m=d["".concat(s,".").concat(p)]||d[p]||u[p]||o;return t?i.createElement(m,r(r({ref:n},c),{},{components:t})):i.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var k=2;k<o;k++)r[k]=t[k];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1088:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return r},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return k}});var i=t(3117),a=(t(7294),t(3905));const o={title:"Dealing with Broken Links",sidebar_position:4},r=void 0,l={unversionedId:"website-management/broken-links",id:"website-management/broken-links",title:"Dealing with Broken Links",description:"Introduction",source:"@site/docs/website-management/broken-links.md",sourceDirName:"website-management",slug:"/website-management/broken-links",permalink:"/docs/website-management/broken-links",draft:!1,editUrl:"https://github.com/vickyhella/vickyhella.github.io/edit/main/docs/website-management/broken-links.md",tags:[],version:"current",lastUpdatedBy:"vickyhella",sidebarPosition:4,frontMatter:{title:"Dealing with Broken Links",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Algolia Search",permalink:"/docs/website-management/algolia-search"},next:{title:"Google Tags",permalink:"/docs/website-management/google-tags"}},s={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Finding Broken Links",id:"finding-broken-links",level:2},{value:"Command-Line Tools",id:"command-line-tools",level:3},{value:"GitHub Actions",id:"github-actions",level:3},{value:"Remark Plugin",id:"remark-plugin",level:3},{value:"Installing the plugin",id:"installing-the-plugin",level:4},{value:"Checking the links",id:"checking-the-links",level:4},{value:"Fixing Broken Links",id:"fixing-broken-links",level:2},{value:"More Info",id:"more-info",level:2},{value:"Adding an ID to Headings",id:"heading-id",level:3}],c={toc:k},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"When maintaining the project documentation, it's important to fix the broken links to save readers' time and make the documentation look more professional and well-maintained."),(0,a.kt)("h2",{id:"finding-broken-links"},"Finding Broken Links"),(0,a.kt)("p",null,"This section will include some link checkers that I found useful."),(0,a.kt)("h3",{id:"command-line-tools"},"Command-Line Tools"),(0,a.kt)("p",null,"You can check if a site contains broken link from the terminal. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stevenvachon/broken-link-checker"},"Broken-link-checker")," is the tool I found useful."),(0,a.kt)("p",null,"First, you need to install the tool as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install broken-link-checker -g\n")),(0,a.kt)("p",null,"To use the tool, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"blc <URL> -ro # check for URLs\nblc <path> -ro # check for paths\n")),(0,a.kt)("p",null,"You can run ",(0,a.kt)("inlineCode",{parentName:"p"},"blc --help")," to find more available options."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You need to replace ",(0,a.kt)("inlineCode",{parentName:"p"},"<URL>")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"<path>")," with the actual ones that you want to find broken links for.")),(0,a.kt)("h3",{id:"github-actions"},"GitHub Actions"),(0,a.kt)("p",null,"Instead of running the command for broken links, you can also add a GitHub action to automate link checks. This documentation project uses the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gaurav-nelson/github-action-markdown-link-check"},"Markdown link check ")," GitHub action to find broken links."),(0,a.kt)("p",null,"To use this GitHub Action:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a new file in your project's root, which should be ",(0,a.kt)("inlineCode",{parentName:"p"},".github/workflows/action.yml"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Open the file, and copy-paste the following workflow to your file."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"name: Check Markdown links # name of the workflow\n\non: \n  push: [main] # when to execute the workflow\n  \njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master # check out your code\n    - uses: gaurav-nelson/github-action-markdown-link-check@v1\n")),(0,a.kt)("admonition",{parentName:"li",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The example above is just for simple use cases. To further customize the workflow, see the README file of the link checker.")))),(0,a.kt)("h3",{id:"remark-plugin"},"Remark Plugin"),(0,a.kt)("p",null,"The third option is using the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/remarkjs/remark"},"remark plugin"),", including ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/remarkjs/remark-validate-links"},"remark-validate-links")," (checks internal links and headings) and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/remarkjs/remark-lint-no-dead-urls"},"remark-lint-no-dead-urls")," (checks external URLs)."),(0,a.kt)("h4",{id:"installing-the-plugin"},"Installing the plugin"),(0,a.kt)("p",null,"To install the plugin:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add remark-cli remark-validate-links remark-lint-no-dead-urls\n")),(0,a.kt)("p",null,"Don't forget to run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn install")," after adding the plugins."),(0,a.kt)("h4",{id:"checking-the-links"},"Checking the links"),(0,a.kt)("p",null,"To check the links:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn remark --quiet --use remark-validate-links --use remark-lint-no-dead-urls <file_directory>\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You need to replace ",(0,a.kt)("inlineCode",{parentName:"p"},"<file_directory>")," with the directory that you need to check links for.")),(0,a.kt)("p",null,"To further simplify the process, you can add the command above to the ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts")," section of your ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  "scripts": {\n    "check-links": "remark --quiet --use remark-validate-links --use remark-lint-no-dead-urls"\n  },\n')),(0,a.kt)("p",null,"By doing so, you can easily run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn check-links <file_directory>")," (equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn remark --quiet --use remark-validate-links --use remark-lint-no-dead-urls <file_directory>"),") in your project to check the links."),(0,a.kt)("p",null,"Additionally, you can add the command to the ",(0,a.kt)("inlineCode",{parentName:"p"},"test-deploy")," GitHub action as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"- name: Install dependencies\n  run: yarn install --frozen-lockfile\n- name: Check external and internal broken links\n  run: yarn run remark --quiet --use remark-validate-links --use remark-lint-no-dead-urls <file_directory>\n- name: Test build website\n  run: yarn build\n")),(0,a.kt)("p",null,"For more information, see the description of each plugin."),(0,a.kt)("h2",{id:"fixing-broken-links"},"Fixing Broken Links"),(0,a.kt)("p",null,"When a link is broken, it's possible that the original page is migrated or deleted. Therefore, you can fix it using either of the following methods as needed."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the original page is migrated, find where the page is migrated and use the new URL in your docs."),(0,a.kt)("li",{parentName:"ul"},"If the original page is deleted, or you cannot find where it's migrated, delete the link from your docs.")),(0,a.kt)("h2",{id:"more-info"},"More Info"),(0,a.kt)("h3",{id:"heading-id"},"Adding an ID to Headings"),(0,a.kt)("p",null,"Usually, a level-2 heading in MD files named ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"## This is a Heading\n")),(0,a.kt)("p",null,"When the heading is clicked in a browser, the URL will be ",(0,a.kt)("inlineCode",{parentName:"p"},"domain/test#this-is-a-heading"),". In other words, if the heading text is changed, the link referenced in other docs will be broken."),(0,a.kt)("p",null,"To avoid this, you can add an ID to headings as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"## This is a Heading {#my-cool-id}\n")),(0,a.kt)("p",null,"In this way, the URL will become ",(0,a.kt)("inlineCode",{parentName:"p"},"domain/test#my-cool-id"),". Maintainers can change the ",(0,a.kt)("inlineCode",{parentName:"p"},"This is a Heading")," text as needed as long as they keep ",(0,a.kt)("inlineCode",{parentName:"p"},"{#my-cool-id}")," unchanged. When other docs need to reference this heading, they can simply use ",(0,a.kt)("inlineCode",{parentName:"p"},"domain/test#my-cool-id"),"."),(0,a.kt)("admonition",{title:"See How it Looks!",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Adding an ID to Headings")," heading on this page uses a ",(0,a.kt)("inlineCode",{parentName:"p"},"heading-id")," ID. You can click the heading and look at its URL.")))}u.isMDXComponent=!0}}]);