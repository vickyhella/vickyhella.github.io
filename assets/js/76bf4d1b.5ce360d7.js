"use strict";(self.webpackChunkvickyhella_github_io=self.webpackChunkvickyhella_github_io||[]).push([[4114],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,k=m["".concat(d,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5268:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Docker Commands",sidebar_position:1},d=void 0,c={unversionedId:"development-basics/docker/docker-commands",id:"development-basics/docker/docker-commands",title:"Docker Commands",description:"This section includes some basic Docker commands.",source:"@site/docs/development-basics/docker/docker-commands.md",sourceDirName:"development-basics/docker",slug:"/development-basics/docker/docker-commands",permalink:"/docs/development-basics/docker/docker-commands",editUrl:"https://github.com/vickyhella/vickyhella.github.io/edit/main/docs/development-basics/docker/docker-commands.md",tags:[],version:"current",lastUpdatedBy:"vickyhella",sidebarPosition:1,frontMatter:{title:"Docker Commands",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Docker",permalink:"/docs/development-basics/docker/"},next:{title:"Dockerfile",permalink:"/docs/development-basics/docker/create-dockerfile"}},s={},p=[{value:"<code>docker run</code>",id:"docker-run",level:2},{value:"<code>docker ps</code>",id:"docker-ps",level:2},{value:"<code>docker stop</code>",id:"docker-stop",level:2},{value:"<code>docker images</code>",id:"docker-images",level:2},{value:"<code>docker pull</code>",id:"docker-pull",level:2},{value:"<code>docker push</code>",id:"docker-push",level:2},{value:"<code>docker build</code>",id:"docker-build",level:2},{value:"<code>docker rm</code>",id:"docker-rm",level:2},{value:"<code>docker rmi</code>",id:"docker-rmi",level:2},{value:"<code>docker update</code>",id:"docker-update",level:2}],m={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section includes some basic Docker commands."),(0,o.kt)("h2",{id:"docker-run"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker run")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/run/"},(0,o.kt)("inlineCode",{parentName:"a"},"docker run"))," is used to create and start a new container from an image."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --name test -it debian bash\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"run --name test"),": runs a container named ",(0,o.kt)("inlineCode",{parentName:"li"},"test")," using the debian:latest image"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-it"),": allocates a pseudo-TTY connected to the container\u2019s stdin"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bash"),": starts a bash shell inside the container")),(0,o.kt)("h2",{id:"docker-ps"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker ps")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker ps")," is used to list all running containers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps\ndocker ps -a # list all containers\n")),(0,o.kt)("h2",{id:"docker-stop"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker stop")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker stop")," is used to stop a running container."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker stop <container_id>\n")),(0,o.kt)("h2",{id:"docker-images"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker images")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker images")," is used to list all available images."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker images\n")),(0,o.kt)("h2",{id:"docker-pull"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker pull")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker pull")," is used to download an image from a registry."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull <image>\n# Example\ndocker pull nginx\n")),(0,o.kt)("h2",{id:"docker-push"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker push")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker push")," is used to upload an image to a registry."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker push <username>/<myimage>\n")),(0,o.kt)("p",null,"The command above pushes an image named ",(0,o.kt)("inlineCode",{parentName:"p"},"<myimage>")," to the Docker Hub registry under the username ",(0,o.kt)("inlineCode",{parentName:"p"},"<username>"),"."),(0,o.kt)("h2",{id:"docker-build"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker build")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker build")," is used to build an image from a Dockerfile."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# build an image named <myimage> from the Dockerfile in the current directory\ndocker build -t <myimage> .\n")),(0,o.kt)("h2",{id:"docker-rm"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker rm")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker rm")," is used to remove one or more containers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker rm <container_id>\n")),(0,o.kt)("h2",{id:"docker-rmi"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker rmi")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker rmi")," is used to delete one or more images."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker rmi <image_id>\n")),(0,o.kt)("h2",{id:"docker-update"},(0,o.kt)("inlineCode",{parentName:"h2"},"docker update")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker update")," is used to update the configuration of one or more containers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Example: update CPU and memory limits\ndocker update --cpus 2 --memory 1g <container_id>\n")),(0,o.kt)("p",null,"The command below updates the ",(0,o.kt)("inlineCode",{parentName:"p"},"--restart")," settings of a container."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# disable restart\ndocker update --restart no <container_id>\n# disable restart for all running containers\ndocker update --restart no $(docker ps -q)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"--restart")," options:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Flag"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"no"),(0,o.kt)("td",{parentName:"tr",align:null},"Do not automatically restart the container (default).")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"on-failure[:max-retries]")),(0,o.kt)("td",{parentName:"tr",align:null},"Restart the container if it exits due to an error, which manifests as a non-zero exit code. Optionally, limit the number of times the Docker daemon attempts to restart the container using the :max-retries option.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"always"),(0,o.kt)("td",{parentName:"tr",align:null},"Always restart the container if it stops. If it is manually stopped, it is restarted only when Docker daemon restarts or the container itself is manually restarted.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"unless-stopped"),(0,o.kt)("td",{parentName:"tr",align:null},"Similar to always, except that when the container is stopped (manually or otherwise), it is not restarted even after Docker daemon restarts.")))))}u.isMDXComponent=!0}}]);